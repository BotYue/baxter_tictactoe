<package format="2">
    <name>ttt_board_sensor</name>
    <!-- "Tic Tac Toe board detector" -->
    <description>
      This package offers functionalities for sensing a tictactoe board from a camera placed over the board.
      Several tools have been developed to achieve a reliable tictactoe board sensor.
      
      # Testing the camera 
        This should test the camera by opening a window where the image is displayed. It uses the custom settings used by Alvaro (mjpeg pixel format, and 960x720 image resolution).
          
          $>roslaunch ttt_board_sensor usb_cam-test.launch
        
        If this for any reason doesn't work, try to using the default settings provided by the `usb_cam` package (yuyv pixel format, and 640x480 image resolution). This settings are
        more suitable for the standard webcams you can find embedded in a laptop.
         
          $>roslaunch usb_cam usb_cam-test.launch

      # Initial setup

        ## HSV calibration
          This opens a window where you can choose the lower and upper values of the HSV components used for detecting either the blue or the red tiles.
            
            $>roslaunch ttt_board_sensor hsv_range_finder.launch
          
          The resulting image is updated in the bottom part of the window. Once the color you desire is filtered (white regions), you have to write down the ranges for H, S, and V.
          These values have to be loaded to the parameter server. In order to do that, you have to include them on the board_state_sensor.launch file.
          In order to close the window, press ESC key and the current values will be displayed in the console.

        ## Cells definition
          This opens a window to define all possible cells in the board (9 cells). You make a polygon for each cell.
          
            $>roslaunch ttt_board_sensor cells_definition.launch
          
          Double left click to add a vertex to the polygon, space bar to close a polygon (a cell), 's' to save to a xml file the polygons, and 'r' to show the result.
          The xml file will be loaded by other launchers (e.g. board_state_sensor.launch, or display_board_cells.launch) so you will have to update this files the first time and in case you change the file name or path.

      # Testing
        
        ## Testing the cells borders
          This displays a window where regions for each cell overlap with the current image. Pressing `s' key you get different images for each cell.
            
            $>roslaunch ttt_board_sensor display_board_cells.launch

        ## Testing the board sensor
          This opens a window with a representation of the TTT board and the current state of each cell. It also launches the board state sensor.
          
          $>roslaunch ttt_board_sensor ttt_board_sensor.launch

      # Launch
      
        This runs the tictactoe board sensor.

          $>roslaunch ttt_board_sensor board_state_sensor.launch

  </description>
  <version>0.1.0</version>
  <author>Álvaro Castro González ‎[acgonzal@ing.uc3m.es]‎</author>
  <maintainer email="olivier.mangin@yale.edu">olivier</maintainer>
  <license>GNU GPL v2</license>
  <buildtool_depend>catkin</buildtool_depend>
  <build_depend>message_generation</build_depend>
  <depend>sensor_msgs</depend>
  <depend>opencv2</depend>
  <depend>cv_bridge</depend>
  <depend>roscpp</depend>
  <depend>rosconsole</depend>
  <depend>std_msgs</depend>
  <depend>image_transport</depend>
  <depend>image_vi</depend>
  <depend>libqt4-dev</depend>
  <depend>usb_cam</depend>

  <exec_depend>message_runtime</exec_depend>

  <export>
        <!--<cpp cflags="-I${prefix}/src -I${prefix}/msg_gen/cpp/include" lflags="-L${prefix}/lib -Wl,-rpath,${prefix}/lib"/>-->
        <cpp cflags="-I${prefix}/src -I${prefix}/msg_gen/cpp/include" lflags="-L${prefix}/lib -Wl,-rpath,${prefix}/lib"/>
  </export>
</package>
