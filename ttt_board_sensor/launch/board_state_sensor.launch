<!--Processes the whole state of the board.
It identifies the state of each cell: red, blue, or empty.
-->
<launch>
    <include file="$(find ttt_board_sensor)/launch/usb_cam_node.launch" />

    <!-- xml file containing the cells of the board -->
    <param name="board_file" textfile="$(find ttt_board_sensor)/resources/ttt_board_lab_B.xml" />

    <!-- Range thresholds for the red tokes -->
    <param name="h_low_red" type="int" value="165" />
    <param name="s_low_red" type="int" value="100" />
    <param name="v_low_red" type="int" value="0" />
    <param name="h_high_red" type="int" value="180" />
    <param name="s_high_red" type="int" value="256" />
    <param name="v_high_red" type="int" value="256" />

    <!-- Range thresholds for the blue tokes -->
    <param name="h_low_blue" type="int" value="90" />
    <param name="s_low_blue" type="int" value="0" />
    <param name="v_low_blue" type="int" value="0" />
    <param name="h_high_blue" type="int" value="130" />
    <param name="s_high_blue" type="int" value="256" />
    <param name="v_high_blue" type="int" value="256" />

    <!-- Colored area threshold in order to consider a token as present. It depends on the distance between the camera and board. -->
    <param name="color_area_threshold" type="int" value="100" /> <!--This is a very low value because we just want to filter noise and red tokens are more dificult-->

    <env name="ROSCONSOLE_CONFIG_FILE" value="$(find ttt_board_sensor)/custom_rosconsole.conf"/>

    <node name="board_state_sensor" pkg="ttt_board_sensor" type="board_state_sensing" respawn="false" output="screen" required="true">
        <remap from="/image_in" to="/usb_cam/image_raw"/>
    </node>

</launch>
