<package>
<description brief="Tic Tac Toe board detector">
This package offers functionalities for sensing a Tic Tac Toe board from a camera placed over the board.

    Several tools have been developed to achieve a reliable TTT board sensor:

    Testing the camera: it opens a window where the image from the camera is displayed.
    $>roslaunch ttt_board_sensor usb_cam-test.launch

    Defining the thresholds for the color filtering: it opens a window where you can change the lower and upper values of the Huge, Saturation, and Value components.
    The resulting image is updated in the bottom part of the window. Once the color you desire is filetered (white regions), you have to write down the ranges for H, S, and V.
    These values have to be loaded to the parameter server. In order to do that, you have to include them on the board_state_sensor.launch file.
    In order to close the window, press ESC key and the current values will be displayed in the console.
    $>roslaunch ttt_board_sensor hsv_range_finder.launch

    Defining the cells: it opens a window to define all possible cells in the board (9 cells). You make a poligon for each cell.
    Double left click to add a vertex to the poligon, space bar to close a poligon (a cell), 's' to save to a xml file the poligons, and 'r' to show the result.
    The xml file will be loaded by other launchers (e.g. board_state_sensor.launch, or display_board_cells.launch) so you will have to update this files the first time and in case you change the file name or path.
    $>roslaunch ttt_board_sensor cells_definition.launch

    Testing the cells delimitation: it displays a window where regions for each cell overlap with the current image.
    Pressing 's' key you get different images for each cell.
    $>roslaunch ttt_board_sensor display_board_cells.launch

    Running the board state sensor.
    $>roslaunch ttt_board_sensor board_state_sensor.launch

    Testing the TTT board perception: it opens a window with a representation of the TTT board and the current state of each cell. It also launches the board state sensor.
    $>roslaunch ttt_board_sensor ttt_board_sensor.launch


  </description>
  <author>Alvaro</author>
  <license>BSD</license>
  <review status="unreviewed" notes=""/>
  <url>http://ros.org/wiki/ttt_board_sensor</url>
  <depend package="sensor_msgs"/>
  <depend package="opencv2"/>
  <depend package="cv_bridge"/>
  <depend package="roscpp"/>
  <depend package="std_msgs"/>
  <depend package="image_transport"/>

  <rosdep name="libqt4-dev"/>
  <rosdep name="usb_cam"/>

  <export>
        <!--<cpp cflags="-I${prefix}/src -I${prefix}/msg_gen/cpp/include" lflags="-L${prefix}/lib -Wl,-rpath,${prefix}/lib"/>-->
        <cpp cflags="-I${prefix}/src -I${prefix}/msg_gen/cpp/include" lflags="-L${prefix}/lib -Wl,-rpath,${prefix}/lib"/>
  </export>

</package>


